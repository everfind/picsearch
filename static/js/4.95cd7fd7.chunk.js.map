{"version":3,"sources":["components/search/index.tsx","components/picture-list/index.tsx","lib/pixabay.ts","lib/pexels.ts","pages/list/api.ts","pages/list/index.tsx"],"names":["Search","className","query","history","useHistory","onKeyDown","useCallback","event","key","keyCode","searchStr","target","value","push","encodeURIComponent","cls","defaultValue","placeholder","PictureList","pictureList","map","pic","rate","width","height","style","flexGrow","flexShrink","background","maxHeight","maxWidth","paddingBottom","data-src","imageUrl","alt","id","search","params","axios","get","q","then","data","catch","total","totalHits","hits","interceptors","request","use","config","headers","page","List","keyword","qs","parse","window","location","substring","useState","photos","setPhotos","getMore","a","pexelsResult","per_page","total_results","prev_page","next_page","tt","pageUrl","url","src","large","pixabayResult","Pixabay","pageURL","largeImageURL","imageWidth","imageHeight","Promise","all","results","reduce","calc","item","concat","pictures","console","log","useEffect","useGetPhotos","pics","length","margin","onClick"],"mappings":"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","file":"static/js/4.95cd7fd7.chunk.js","sourcesContent":["import React from 'react';\nimport cls from 'clsx';\nimport { useHistory } from 'react-router';\nimport { useCallback } from 'react';\n\nexport const Search = function ({ className, query }: { className?: string; query?: string }) {\n    const history = useHistory();\n    const onKeyDown = useCallback(\n        (event: React.KeyboardEvent<HTMLInputElement>) => {\n            if (event.key === 'Enter' || event.keyCode === 13) {\n                const searchStr = (event.target as any).value;\n                history.push(`/list?q=${encodeURIComponent(searchStr)}`);\n            }\n        },\n        [history],\n    );\n    return (\n        <div className={cls('w-2/4', 'h-14', 'rounded-lg', 'bg-white', 'overflow-hidden', className)}>\n            <input defaultValue={query} className={cls('w-full', 'h-full', 'p-3', 'outline-none', 'text-lg')} placeholder='搜索免费图片' onKeyDown={onKeyDown} />\n        </div>\n    );\n};\n","import React from 'react';\nimport cls from 'clsx';\nimport { Picture } from '../../types';\nimport './index.css';\n\nexport function PictureList({ pictureList }: { pictureList: Picture[] }) {\n    return (\n        <ul className={cls('flex', 'flex-row', 'flex-wrap')}>\n            {pictureList.map((pic) => {\n                const rate = pic.width / pic.height;\n                const baseHeight = 250;\n                return (\n                    <div\n                        key={pic.id}\n                        className={cls('relative', 'm-1')}\n                        style={{ width: `${rate * baseHeight}px`, flexGrow: rate * baseHeight, flexShrink: rate * baseHeight, background: '#f6f5fa', maxHeight: '50vh', maxWidth: `calc(${rate} * 50vh)` }}\n                    >\n                        <i className={cls('block')} style={{ paddingBottom: `${(1 / rate) * 100}%` }}></i>\n                        <img className={cls('absolute', 'w-full', 'h-full', 'top-0', 'align-bottom', 'border', 'lazyload')} data-src={pic.imageUrl} alt='' />\n                    </div>\n                );\n            })}\n        </ul>\n    );\n}\n","import axios from 'axios';\n\n// https://pixabay.com/api/docs/\nexport interface SearchParams {\n    q: string;\n    page: number;\n    per_page: number;\n    orientation?: 'horizontal' | 'vertical';\n    image_type?: 'all' | 'photo' | 'illustration' | 'vector';\n    category?:\n        | 'backgrounds'\n        | 'fashion'\n        | 'nature'\n        | 'science'\n        | 'education'\n        | 'feelings'\n        | 'health'\n        | 'people'\n        | 'religion'\n        | 'places'\n        | 'animals'\n        | 'industry'\n        | 'computer'\n        | 'food'\n        | 'sports'\n        | 'transportation'\n        | 'travel'\n        | 'buildings'\n        | 'business'\n        | 'music';\n    min_width?: number;\n    min_height?: number;\n    colors?: 'grayscale' | 'transparent' | 'red' | 'orange' | 'yellow' | 'green' | 'turquoise' | 'blue' | 'lilac' | 'pink' | 'white' | 'gray' | 'black' | 'brown';\n    safesearch?: 'true' | 'false';\n    order?: 'popular' | 'latest';\n}\n\nexport interface Photo {\n    id: string;\n    pageURL: string;\n    previewURL: string;\n    webformatURL: string;\n    largeImageURL: string;\n    imageHeight: number;\n    imageWidth: number;\n}\n\nexport interface SearchReturn {\n    total: number;\n    totalHits: number;\n    hits: Photo[];\n}\n\nexport function search(params: SearchParams): Promise<SearchReturn> {\n    return axios\n        .get<SearchReturn>('https://pixabay.com/api/', {\n            params: {\n                key: '24009231-e8e4fd260a26521d059640a40',\n                ...params,\n                q: encodeURIComponent(params.q),\n            },\n        })\n        .then(({ data }) => data)\n        .catch(() => {\n            return { total: 0, totalHits: 0, hits: [] };\n        });\n}\n","import axios from 'axios';\n\naxios.interceptors.request.use(function (config) {\n    if (!config.headers) {\n        config.headers = {};\n    }\n    config.headers['Authorization'] = '563492ad6f91700001000001ee73ec26350b4a91aa701684cd9cf496';\n    return config;\n});\n\n// https://www.pexels.com/zh-cn/api/documentation/\nexport interface SearchParams {\n    query: string;\n    page: number;\n    per_page: number;\n    orientation?: 'landscape' | 'portrait' | 'square';\n    size?: 'large' | 'medium' | 'small';\n    color?: 'red' | 'orange' | 'yellow' | 'green' | 'turquoise' | 'blue' | 'violet' | 'pink' | 'brown' | 'black' | 'gray' | 'white';\n}\n\nexport interface Photo {\n    id: string;\n    width: number;\n    height: number;\n    url: string;\n    src: {\n        original: string;\n        large: string;\n        large2x: string;\n        medium: string;\n        small: string;\n        portrait: string;\n        landscape: string;\n        tiny: string;\n    };\n}\n\nexport interface SearchReturn {\n    total_results: number;\n    page: number;\n    per_page: number;\n    prev_page: number;\n    next_page: number;\n    photos: Photo[];\n}\n\nexport function search(params: SearchParams): Promise<SearchReturn> {\n    return axios\n        .get<SearchReturn>('https://api.pexels.com/v1/search/', {\n            params: {\n                ...params,\n                query: encodeURIComponent(params.query),\n            },\n        })\n        .then(({ data }) => data)\n        .catch(() => {\n            return { total_results: 0, page: 0, per_page: 0, prev_page: 0, next_page: 0, photos: [] };\n        });\n}\n\nexport function curated(params: { page: number; per_page: number }) {\n    return axios\n        .get<SearchReturn>('https://api.pexels.com/v1/search/', {\n            params,\n        })\n        .then(({ data }) => data)\n        .catch(() => {\n            return { total_results: 0, page: 0, per_page: 0, prev_page: 0, next_page: 0, photos: [] };\n        });\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport * as Pexels from '../../lib/pexels';\nimport * as Pixabay from '../../lib/pixabay';\nimport { Picture } from '../../types';\n\nlet page = 1;\n\nexport function useGetPhotos({ keyword }: { keyword: string }): [Picture[], () => void] {\n    const [photos, setPhotos] = useState<Picture[]>([]);\n    const getMore = useCallback(async () => {\n        const pexelsResult: Promise<Picture[]> = Pexels.search({ query: keyword, page, per_page: 80 }).then((photos) => {\n            return photos.photos.map((tt) => ({ id: tt.id, pageUrl: tt.url, imageUrl: tt.src.large, width: tt.width, height: tt.height }));\n        });\n        const pixabayResult: Promise<Picture[]> = Pixabay.search({ q: keyword, page, per_page: 80 }).then((photos) => {\n            return photos.hits.map((tt) => ({ id: tt.id, pageUrl: tt.pageURL, imageUrl: tt.largeImageURL, width: tt.imageWidth, height: tt.imageHeight }));\n        });\n        const pictures = await Promise.all([pexelsResult, pixabayResult]).then((results) => results.reduce((calc, item) => calc.concat(item), []));\n        console.log(photos, pictures);\n        setPhotos([...photos, ...pictures]);\n        page++;\n        /* eslint-disable react-hooks/exhaustive-deps */\n    }, [setPhotos, keyword, photos]);\n\n    useEffect(() => {\n        if (page === 1) {\n            getMore();\n        }\n    }, [page]);\n\n    return [photos, getMore];\n}\n","import React, { useState } from 'react';\nimport cls from 'clsx';\nimport qs from 'qs';\nimport { Search } from '../../components/search';\nimport { PictureList } from '../../components/picture-list';\nimport { useGetPhotos } from './api';\n\nexport default function List() {\n    const { q: keyword } = qs.parse(window.location.search.substring(1));\n    const [pics, getMore] = useGetPhotos({ keyword: keyword as string });\n    return (\n        <div className={cls('w-screen', 'h-screen', 'bg-gray-100', 'overflow-y-auto')}>\n            <div className={cls('flex', 'flex-row', 'justify-center', 'p-4')}>\n                <Search query={keyword as string} />\n            </div>\n            <p className={cls('m-2', 'text-gray-600')}>您查找的关于“{keyword}”的图片：</p>\n            <PictureList pictureList={pics} />\n            {!!pics.length && (\n                <button className={cls('block', 'w-28')} style={{ margin: '10px auto' }} onClick={() => getMore()}>\n                    加载更多\n                </button>\n            )}\n        </div>\n    );\n}\n"],"sourceRoot":""}